//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\ug_customization\application\dialogs\tunnel+slot\tunnelslot.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: USP
//              Version: NX 7.5
//              Date: 06-03-2013  (Format: mm-dd-yyyy)
//              Time: 17:38 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using NXOpen;
using NXOpen.Assemblies;
using NXOpen.BlockStyler;
using System;
using System.IO;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class tunnelslot
{
    //class members
    public static tunnelslot thetunnelslot;
    private string theDialogName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.UIBlock group;// Block type: Group
    private NXOpen.BlockStyler.UIBlock selection0;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock face_select0;// Block type: Face Collector
    private NXOpen.BlockStyler.UIBlock direction0;// Block type: Reverse Direction
    private NXOpen.BlockStyler.UIBlock group1;// Block type: Group
    private NXOpen.BlockStyler.UIBlock selection01;// Block type: Selection
    private NXOpen.BlockStyler.UIBlock point0;// Block type: Specify Point
    private NXOpen.BlockStyler.UIBlock direction01;// Block type: Reverse Direction
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesEnabled
    //------------------------------------------------------------------------------
    public static readonly int              SnapPointTypesEnabled_UserDefined = (1 << 0);
    public static readonly int                 SnapPointTypesEnabled_Inferred = (1 << 1);
    public static readonly int           SnapPointTypesEnabled_ScreenPosition = (1 << 2);
    public static readonly int                 SnapPointTypesEnabled_EndPoint = (1 << 3);
    public static readonly int                 SnapPointTypesEnabled_MidPoint = (1 << 4);
    public static readonly int             SnapPointTypesEnabled_ControlPoint = (1 << 5);
    public static readonly int             SnapPointTypesEnabled_Intersection = (1 << 6);
    public static readonly int                SnapPointTypesEnabled_ArcCenter = (1 << 7);
    public static readonly int            SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
    public static readonly int            SnapPointTypesEnabled_ExistingPoint = (1 << 9);
    public static readonly int             SnapPointTypesEnabled_PointonCurve = (1 <<10);
    public static readonly int           SnapPointTypesEnabled_PointonSurface = (1 <<11);
    public static readonly int         SnapPointTypesEnabled_PointConstructor = (1 <<12);
    public static readonly int     SnapPointTypesEnabled_TwocurveIntersection = (1 <<13);
    public static readonly int             SnapPointTypesEnabled_TangentPoint = (1 <<14);
    public static readonly int                    SnapPointTypesEnabled_Poles = (1 <<15);
    public static readonly int         SnapPointTypesEnabled_BoundedGridPoint = (1 <<16);
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesOnByDefault
    //------------------------------------------------------------------------------
    public static readonly int          SnapPointTypesOnByDefault_UserDefined = (1 << 0);
    public static readonly int             SnapPointTypesOnByDefault_Inferred = (1 << 1);
    public static readonly int       SnapPointTypesOnByDefault_ScreenPosition = (1 << 2);
    public static readonly int             SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int             SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int         SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int         SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int            SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int        SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int        SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int         SnapPointTypesOnByDefault_PointonCurve = (1 <<10);
    public static readonly int       SnapPointTypesOnByDefault_PointonSurface = (1 <<11);
    public static readonly int     SnapPointTypesOnByDefault_PointConstructor = (1 <<12);
    public static readonly int SnapPointTypesOnByDefault_TwocurveIntersection = (1 <<13);
    public static readonly int         SnapPointTypesOnByDefault_TangentPoint = (1 <<14);
    public static readonly int                SnapPointTypesOnByDefault_Poles = (1 <<15);
    public static readonly int     SnapPointTypesOnByDefault_BoundedGridPoint = (1 <<16);
    //------------------------------------------------------------------------------
    //Bit Option for Property: EntityType
    //------------------------------------------------------------------------------
    public static readonly int                          EntityType_AllowFaces = (1 << 4);
    public static readonly int                         EntityType_AllowDatums = (1 << 5);
    public static readonly int                         EntityType_AllowBodies = (1 << 6);
    //------------------------------------------------------------------------------
    //Bit Option for Property: FaceRules
    //------------------------------------------------------------------------------
    public static readonly int                           FaceRules_SingleFace = (1 << 0);
    public static readonly int                          FaceRules_RegionFaces = (1 << 1);
    public static readonly int                         FaceRules_TangentFaces = (1 << 2);
    public static readonly int                   FaceRules_TangentRegionFaces = (1 << 3);
    public static readonly int                            FaceRules_BodyFaces = (1 << 4);
    public static readonly int                         FaceRules_FeatureFaces = (1 << 5);
    public static readonly int                        FaceRules_AdjacentFaces = (1 << 6);
    public static readonly int                  FaceRules_ConnectedBlendFaces = (1 << 7);
    public static readonly int                        FaceRules_AllBlendFaces = (1 << 8);
    public static readonly int                             FaceRules_RibFaces = (1 << 9);
    public static readonly int                            FaceRules_SlotFaces = (1 <<10);
    public static readonly int                   FaceRules_BossandPocketFaces = (1 <<11);
    public static readonly int                       FaceRules_MergedRibFaces = (1 <<12);
    public static readonly int                  FaceRules_RegionBoundaryFaces = (1 <<13);
    public static readonly int                 FaceRules_FaceandAdjacentFaces = (1 <<14);
    
    //---------------------------------------------------------------------------------

    UspElement element1, element2;
    Tunnel tunnel1;
    SlotSet slotSet1, slotSet2;
    Slot slot1, slot2;
    SlotConstraint slotConstr;

    bool faceSelected = false;
    bool pointSelected = false;

    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public tunnelslot()
    {
        try
        {
            theDialogName = AppDomain.CurrentDomain.BaseDirectory + 
                Config.dlxFolder + Config.dlxTunnelSlot;

            theDialog = Config.theUI.CreateDialog(theDialogName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddCancelHandler(new NXOpen.BlockStyler.BlockDialog.Cancel(cancel_cb));
            theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.FocusNotify(focusNotify_cb));
            theDialog.AddKeyboardFocusNotifyHandler(new NXOpen.BlockStyler.BlockDialog.KeyboardFocusNotify(keyboardFocusNotify_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            Log.writeLine("++++++++++++++++++++++++++++++++++++++++++++++++" + " Начало работы программы");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Remove the following conditional definitions:
    //                a) #if USER_EXIT_OR_MENU
    //                    #endif//USER_EXIT_OR_MENU
    //
    //                b) #if USER_EXIT
    //                    #endif//USER_EXIT
    //        2) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        3) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //    3. THROUGH CALLBACK OF ANOTHER DIALOG
    //
    //        1) Remove the following conditional definition:
    //             #if CALLBACK
    //             #endif//CALLBACK
    //        2) Call the following line of code from where ever you want to lauch this dialog.
    //             tunnelslot.Show_tunnelslot();
    //        3) Integrate this file with your main application file.
    //
    //    4. MENU BAR
    //    
    //        1) Remove the following conditional definition:
    //                a) #if USER_EXIT_OR_MENU
    //                   #endif//USER_EXIT_OR_MENU
    //        2) Add the following lines to your MenuScript file in order to
    //           associate a menu bar button with your dialog.  In this
    //           example, a cascade menu will be created and will be
    //           located just before the Help button on the main menubar.
    //           The button, SAMPLEVB_BTN is set up to launch your dialog and
    //           will be positioned as the first button on your pulldown menu.
    //           If you wish to add the button to an existing cascade, simply
    //           add the 3 lines between MENU LAUNCH_CASCADE and END_OF_MENU
    //           to your menuscript file.
    //           The MenuScript file requires an extension of ".men".
    //           Move the contents between the dashed lines to your Menuscript file.
    //        
    //           !-----------------------------------------------------------------------------
    //           VERSION 120
    //        
    //           EDIT UG_GATEWAY_MAIN_MENUBAR
    //        
    //           BEFORE UG_HELP
    //           CASCADE_BUTTON BLOCKSTYLER_DLX_CASCADE_BTN
    //           LABEL Dialog Launcher
    //           END_OF_BEFORE
    //        
    //           MENU BLOCKSTYLER_DLX_CASCADE_BTN
    //           BUTTON SAMPLEVB_BTN
    //           LABEL Display SampleVB dialog
    //           ACTIONS <path of Shared library> !For example: D:\temp\SampleVB.dll
    //           END_OF_MENU
    //           !-----------------------------------------------------------------------------
    //        
    //        3) Make sure the .men file is in one of the following locations:
    //        
    //           - $UGII_USER_DIR/startup   
    //           - For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //             recommended. This variable is set to a full directory path to a file 
    //             containing a list of root directories for all custom applications.
    //             e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
    //    
    //------------------------------------------------------------------------------
//#if USER_EXIT_OR_MENU
    public static void Main()
    {
        try
        {
            thetunnelslot = new tunnelslot();
            // The following method shows the dialog immediately
            thetunnelslot.Show();
            Log.writeLine("-------------------------------------------------" + " Конец работы программы");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            thetunnelslot.Dispose();
        }
    }
//#endif//USER_EXIT_OR_MENU
//#if USER_EXIT
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static int UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
//#endif//USER_EXIT
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
//#if CALLBACK
    //------------------------------------------------------------------------------
    //Method name: Show_tunnelslot
    //------------------------------------------------------------------------------
    public static void Show_tunnelslot()
    {
        try
        {
            thetunnelslot = new tunnelslot();
            // The following method shows the dialog immediately
            thetunnelslot.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            thetunnelslot.Dispose();
        }
    }
//#endif//CALLBACK
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group");
            selection0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection0");
            face_select0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("face_select0");
            direction0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("direction0");
            group1 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("group1");
            selection01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("selection01");
            point0 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("point0");
            direction01 = (NXOpen.BlockStyler.UIBlock)theDialog.TopBlock.FindBlock("direction01");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
            Log.writeLine("Нажата кнопка ПРИМЕНИТЬ.");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == selection0)
            {
            //---------Enter your code here-----------
                Log.writeLine("Нажат выбор объекта по первому select.");
                setFirstComponent(block);
            }
            else if(block == face_select0)
            {
            //---------Enter your code here-----------
                Log.writeLine("Нажат выбор первой грани.");
                setFirstFace(block);
            }
            else if(block == direction0)
            {
            //---------Enter your code here-----------
            }
            else if(block == selection01)
            {
            //---------Enter your code here-----------
                Log.writeLine("Нажат выбор объекта по второму select.");
                setSecondComponent(block);
            }
            else if(block == point0)
            {
            //---------Enter your code here-----------
                Log.writeLine("Нажата постановка второй точки.");
                setSecondPoint(block);
            }
            else if(block == direction01)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
            Log.writeLine("Нажата кнопка ОК.");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: cancel_cb
    //------------------------------------------------------------------------------
    public int cancel_cb()
    {
        try
        {
            //---- Enter your callback code here -----
            Log.writeLine("Нажата кнопка ОТМЕНА.");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: filter_cb
    //------------------------------------------------------------------------------
    public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
    {
        return(NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: focusNotify_cb
    //This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
    //------------------------------------------------------------------------------
    public void focusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: keyboardFocusNotify_cb
    //This callback is executed when block which can receive keyboard entry, receives the focus.
    //------------------------------------------------------------------------------
    public void keyboardFocusNotify_cb(NXOpen.BlockStyler.UIBlock block, bool focus)
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            Config.theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //--------------------------------------------------------------------

    void setFirstComponent(UIBlock block)
    {
        if (setComponent(block, ref this.element1))
        {
            setEnable(this.face_select0, true);
            this.slotSet1 = new SlotSet(this.element1);
            this.element1.setBottomFaces();
        }
        else
        {
            unSelectObjects(this.face_select0);
            this.faceSelected = false;
            setEnable(this.face_select0, false);
        }
    }
    void setSecondComponent(UIBlock block)
    {
        if (this.setComponent(block, ref this.element2))
        {
            setEnable(this.point0, true);
            this.slotSet2 = new SlotSet(this.element2);
            this.element2.setBottomFaces();
        }
        else
        {
            this.pointSelected = false;
            unSelectObjects(this.point0);
            setEnable(this.point0, false);
        }
    }
    bool setComponent(UIBlock block, ref UspElement element)
    {
        PropertyList prop_list = block.GetProperties();
        TaggedObject[] tag_obs = prop_list.GetTaggedObjectVector("SelectedObjects");

        //если не деселект
        if (tag_obs.Length > 0)
        {
            Component parentComponent = Config.findCompByBodyTag(tag_obs[0].Tag);
            if (Geom.isComponent(tag_obs[0]))
            {
                Log.writeLine("Объект - " + tag_obs[0].ToString() +
                    " - " + parentComponent.Name);

                element = new UspElement(parentComponent);
                return true;
            }
            else
            {
                string message = "Выбрана не деталь УСП!" + Environment.NewLine +
                    "Пожалуйста, перевыберите элемент.";
                Log.writeWarning(message);
                Log.writeLine("Объект - " + tag_obs[0].ToString());
                unSelectObjects(block);

                Config.theUI.NXMessageBox.Show("Error!",
                                               NXMessageBox.DialogType.Error,
                                               message);

                block.Focus();
                return false;
            }
        }
        else
        {
            Log.writeLine("Деселект объекта.");
            return false;
        }
    }

    void setFirstFace(UIBlock block)
    {
        if (setFace(block, ref this.tunnel1, this.element1))
        {
            this.faceSelected = true;
            setConstraints();
        }
        else
        {
            this.faceSelected = false;
        }
    }
    bool setFace(UIBlock block, ref Tunnel tunnel, UspElement element)
    {
        PropertyList propertyList = block.GetProperties();
        TaggedObject[] TO = propertyList.GetTaggedObjectVector("SelectedObjects");

        //если не деселект
        if (TO.Length > 0)
        {
            Face face;
            if (findFace(TO, element, out face))
	        {
                if (face.SolidFaceType == Face.FaceType.Cylindrical)
                {
                    Log.writeLine("Грань выбрана - " + face.ToString());
                    tunnel = new Tunnel(face, element);
                    return true;
                }
                else
                {
                    string message = "Грань не цилиндрическая! Выберите другую грань!";
                    Log.writeWarning(message + Environment.NewLine + "Выбрана грань - " + face.ToString());
                    unSelectObjects(block);
                    Config.theUI.NXMessageBox.Show("Error!",
                                                   NXMessageBox.DialogType.Error,
                                                   message);
                    block.Focus();
                    return false;
                }
            }

            string mess = "Грань не найдена! Выберите другую грань!";
            Log.writeWarning(mess);
            Config.theUI.NXMessageBox.Show("Error!",
                                           NXMessageBox.DialogType.Error,
                                           mess);
            block.Focus();
            return false;
        }
        else
        {
            Log.writeLine("Деселект грани");
            return false;
        }
    }
    
    bool findFace(TaggedObject[] TO, UspElement element, out Face face)
    {
        TaggedObject t = TO[0];

        PartCollection PC = Config.theSession.Parts;
        foreach (Part p in PC)
        {
            BodyCollection BC = p.Bodies;

            foreach (Body b in BC)
            {
                Face[] FC = b.GetFaces();

                foreach (Face f in FC)
                {
                    if (f.Tag == t.Tag)
                    {
                        int type;
                        double[] point = new double[3];
                        double[] dir = new double[3];
                        double[] box = new double[6];
                        double radius;
                        double raddata;
                        int normDir;

                        Config.theUFSession.Modl.AskFaceData(f.Tag, out type, point, dir, box, out radius,
                            out raddata, out normDir);

                        foreach (Face ff in element.Body.GetFaces())
                        {
                            int type2;
                            double[] point2 = new double[3];
                            double[] dir2 = new double[3];
                            double[] box2 = new double[6];
                            double radius2;
                            double raddata2;
                            int normDir2;

                            Config.theUFSession.Modl.AskFaceData(ff.Tag, out type2, point2, dir2, box2,
                                out radius2, out raddata2, out normDir2);

                            if (type == type2 && normDir == normDir2 &&
                                Config.round(radius) == Config.round(radius2) &&
                                Config.round(raddata) == Config.round(raddata2) &&
                                Geom.isEqual(point, point2) && Geom.isEqual(dir, dir2))
                            {
                                face = ff;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        face = null;
        return false;
    }

    void setSecondPoint(UIBlock block)
    {
        if (setPoint(block, slotSet2))
        {
            this.pointSelected = true;
            setConstraints();
        }
        else
        {
            this.pointSelected = false;
            unSelectObjects(this.selection01);
            this.selection01.Focus();
            setEnable(block, false);
        }
    }
    bool setPoint(UIBlock block, SlotSet slotSet)
    {
        slotSet.setPoint(block);
        if (slotSet.haveNearestBottomFace())
        {
            slotSet.setNearestEdges();

            return true;
        }
        else
        {
            string message = "Базовые плоскости пазов не найдены!" + Environment.NewLine + 
                                "Выберите другой элемент!";
            Log.writeWarning(message);
            Config.theUI.NXMessageBox.Show("Error!",
                                           NXMessageBox.DialogType.Error,
                                           message);
            unSelectObjects(block);
            return false;
        }
    }

    void setEnable(UIBlock block, bool enable)
    {
        PropertyList prop_list = block.GetProperties();
        prop_list.SetLogical("Enable", enable);
    }
    void unSelectObjects(UIBlock block)
    {
        PropertyList prop_list = block.GetProperties();
        prop_list.SetTaggedObjectVector("SelectedObjects", new TaggedObject[0]);
    }

    void setConstraints()
    {
        if (this.faceSelected && this.pointSelected)
        {
            if (this.slotSet1.hasSlot(out this.slot1) &&
                this.slotSet2.hasSlot(out this.slot2))
            {
                slotConstr = new SlotConstraint(this.slot1, this.slot2);
            }
        }
    }
}
